/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protoc.MessageReq', null, global);
goog.exportSymbol('proto.protoc.MessageReq.Message', null, global);
goog.exportSymbol('proto.protoc.MessageReq.Message.ContentType', null, global);
goog.exportSymbol('proto.protoc.OnlineReq', null, global);
goog.exportSymbol('proto.protoc.OnlineReq.Item', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.MessageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protoc.MessageReq.repeatedFields_, null);
};
goog.inherits(proto.protoc.MessageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.MessageReq.displayName = 'proto.protoc.MessageReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protoc.MessageReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.MessageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.MessageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.MessageReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protoc.MessageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.protoc.MessageReq.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.MessageReq}
 */
proto.protoc.MessageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.MessageReq;
  return proto.protoc.MessageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.MessageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.MessageReq}
 */
proto.protoc.MessageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.MessageReq.Message;
      reader.readMessage(value,proto.protoc.MessageReq.Message.deserializeBinaryFromReader);
      msg.getMessagesList().push(value);
      msg.setMessagesList(msg.getMessagesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protoc.MessageReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.MessageReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.MessageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.MessageReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protoc.MessageReq.Message.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protoc.MessageReq} The clone.
 */
proto.protoc.MessageReq.prototype.cloneMessage = function() {
  return /** @type {!proto.protoc.MessageReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Message Messages = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protoc.MessageReq.Message>}
 */
proto.protoc.MessageReq.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.protoc.MessageReq.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protoc.MessageReq.Message, 1));
};


/** @param {Array.<!proto.protoc.MessageReq.Message>|undefined} value  */
proto.protoc.MessageReq.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.protoc.MessageReq.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.MessageReq.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.MessageReq.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.MessageReq.Message.displayName = 'proto.protoc.MessageReq.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.MessageReq.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.MessageReq.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.MessageReq.Message} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protoc.MessageReq.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    from: msg.getFrom(),
    to: msg.getTo(),
    content: msg.getContent(),
    type: msg.getType(),
    isgroupmessage: msg.getIsgroupmessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.MessageReq.Message}
 */
proto.protoc.MessageReq.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.MessageReq.Message;
  return proto.protoc.MessageReq.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.MessageReq.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.MessageReq.Message}
 */
proto.protoc.MessageReq.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 5:
      var value = /** @type {!proto.protoc.MessageReq.Message.ContentType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgroupmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protoc.MessageReq.Message} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.MessageReq.Message.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.MessageReq.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.MessageReq.Message.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getFrom();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getTo();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = this.getIsgroupmessage();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protoc.MessageReq.Message} The clone.
 */
proto.protoc.MessageReq.Message.prototype.cloneMessage = function() {
  return /** @type {!proto.protoc.MessageReq.Message} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 Id = 1;
 * @return {number}
 */
proto.protoc.MessageReq.Message.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protoc.MessageReq.Message.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 From = 2;
 * @return {number}
 */
proto.protoc.MessageReq.Message.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protoc.MessageReq.Message.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 To = 3;
 * @return {number}
 */
proto.protoc.MessageReq.Message.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protoc.MessageReq.Message.prototype.setTo = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Content = 4;
 * @return {string}
 */
proto.protoc.MessageReq.Message.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.protoc.MessageReq.Message.prototype.setContent = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional ContentType Type = 5;
 * @return {!proto.protoc.MessageReq.Message.ContentType}
 */
proto.protoc.MessageReq.Message.prototype.getType = function() {
  return /** @type {!proto.protoc.MessageReq.Message.ContentType} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {!proto.protoc.MessageReq.Message.ContentType} value  */
proto.protoc.MessageReq.Message.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool IsGroupMessage = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protoc.MessageReq.Message.prototype.getIsgroupmessage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.protoc.MessageReq.Message.prototype.setIsgroupmessage = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.protoc.MessageReq.Message.ContentType = {
  TEXT: 0,
  PIC: 1,
  EMOTION: 2,
  VOICE: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.OnlineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protoc.OnlineReq.repeatedFields_, null);
};
goog.inherits(proto.protoc.OnlineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.OnlineReq.displayName = 'proto.protoc.OnlineReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protoc.OnlineReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.OnlineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.OnlineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.OnlineReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protoc.OnlineReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.protoc.OnlineReq.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.OnlineReq}
 */
proto.protoc.OnlineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.OnlineReq;
  return proto.protoc.OnlineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.OnlineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.OnlineReq}
 */
proto.protoc.OnlineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.OnlineReq.Item;
      reader.readMessage(value,proto.protoc.OnlineReq.Item.deserializeBinaryFromReader);
      msg.getItemsList().push(value);
      msg.setItemsList(msg.getItemsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protoc.OnlineReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.OnlineReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.OnlineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.OnlineReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protoc.OnlineReq.Item.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protoc.OnlineReq} The clone.
 */
proto.protoc.OnlineReq.prototype.cloneMessage = function() {
  return /** @type {!proto.protoc.OnlineReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Item Items = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protoc.OnlineReq.Item>}
 */
proto.protoc.OnlineReq.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.protoc.OnlineReq.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protoc.OnlineReq.Item, 1));
};


/** @param {Array.<!proto.protoc.OnlineReq.Item>|undefined} value  */
proto.protoc.OnlineReq.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.protoc.OnlineReq.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.OnlineReq.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.OnlineReq.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.OnlineReq.Item.displayName = 'proto.protoc.OnlineReq.Item';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.OnlineReq.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.OnlineReq.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.OnlineReq.Item} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protoc.OnlineReq.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    isonline: msg.getIsonline(),
    isgroup: msg.getIsgroup()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.OnlineReq.Item}
 */
proto.protoc.OnlineReq.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.OnlineReq.Item;
  return proto.protoc.OnlineReq.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.OnlineReq.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.OnlineReq.Item}
 */
proto.protoc.OnlineReq.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsonline(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protoc.OnlineReq.Item} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.OnlineReq.Item.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.OnlineReq.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protoc.OnlineReq.Item.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getIsonline();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getIsgroup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protoc.OnlineReq.Item} The clone.
 */
proto.protoc.OnlineReq.Item.prototype.cloneMessage = function() {
  return /** @type {!proto.protoc.OnlineReq.Item} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 Id = 1;
 * @return {number}
 */
proto.protoc.OnlineReq.Item.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protoc.OnlineReq.Item.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool IsOnline = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protoc.OnlineReq.Item.prototype.getIsonline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.protoc.OnlineReq.Item.prototype.setIsonline = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool IsGroup = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protoc.OnlineReq.Item.prototype.getIsgroup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.protoc.OnlineReq.Item.prototype.setIsgroup = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto.protoc);
